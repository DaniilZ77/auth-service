// Code generated by mockery v2.53.3. DO NOT EDIT.

package service

import mock "github.com/stretchr/testify/mock"

// MockSessionBlacklist is an autogenerated mock type for the SessionBlacklist type
type MockSessionBlacklist struct {
	mock.Mock
}

type MockSessionBlacklist_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionBlacklist) EXPECT() *MockSessionBlacklist_Expecter {
	return &MockSessionBlacklist_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: sessionID
func (_m *MockSessionBlacklist) Add(sessionID string) {
	_m.Called(sessionID)
}

// MockSessionBlacklist_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockSessionBlacklist_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - sessionID string
func (_e *MockSessionBlacklist_Expecter) Add(sessionID interface{}) *MockSessionBlacklist_Add_Call {
	return &MockSessionBlacklist_Add_Call{Call: _e.mock.On("Add", sessionID)}
}

func (_c *MockSessionBlacklist_Add_Call) Run(run func(sessionID string)) *MockSessionBlacklist_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSessionBlacklist_Add_Call) Return() *MockSessionBlacklist_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSessionBlacklist_Add_Call) RunAndReturn(run func(string)) *MockSessionBlacklist_Add_Call {
	_c.Run(run)
	return _c
}

// In provides a mock function with given fields: sessionID
func (_m *MockSessionBlacklist) In(sessionID string) bool {
	ret := _m.Called(sessionID)

	if len(ret) == 0 {
		panic("no return value specified for In")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(sessionID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockSessionBlacklist_In_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'In'
type MockSessionBlacklist_In_Call struct {
	*mock.Call
}

// In is a helper method to define mock.On call
//   - sessionID string
func (_e *MockSessionBlacklist_Expecter) In(sessionID interface{}) *MockSessionBlacklist_In_Call {
	return &MockSessionBlacklist_In_Call{Call: _e.mock.On("In", sessionID)}
}

func (_c *MockSessionBlacklist_In_Call) Run(run func(sessionID string)) *MockSessionBlacklist_In_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSessionBlacklist_In_Call) Return(_a0 bool) *MockSessionBlacklist_In_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionBlacklist_In_Call) RunAndReturn(run func(string) bool) *MockSessionBlacklist_In_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSessionBlacklist creates a new instance of MockSessionBlacklist. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionBlacklist(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionBlacklist {
	mock := &MockSessionBlacklist{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
