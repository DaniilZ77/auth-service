// Code generated by mockery v2.53.3. DO NOT EDIT.

package service

import (
	context "context"

	models "github.com/DaniilZ77/auth-service/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// MockSessionStorage is an autogenerated mock type for the SessionStorage type
type MockSessionStorage struct {
	mock.Mock
}

type MockSessionStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionStorage) EXPECT() *MockSessionStorage_Expecter {
	return &MockSessionStorage_Expecter{mock: &_m.Mock}
}

// GetSessionByID provides a mock function with given fields: ctx, sessionID
func (_m *MockSessionStorage) GetSessionByID(ctx context.Context, sessionID string) (*models.Session, error) {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionByID")
	}

	var r0 *models.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Session, error)); ok {
		return rf(ctx, sessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Session); ok {
		r0 = rf(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionStorage_GetSessionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionByID'
type MockSessionStorage_GetSessionByID_Call struct {
	*mock.Call
}

// GetSessionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID string
func (_e *MockSessionStorage_Expecter) GetSessionByID(ctx interface{}, sessionID interface{}) *MockSessionStorage_GetSessionByID_Call {
	return &MockSessionStorage_GetSessionByID_Call{Call: _e.mock.On("GetSessionByID", ctx, sessionID)}
}

func (_c *MockSessionStorage_GetSessionByID_Call) Run(run func(ctx context.Context, sessionID string)) *MockSessionStorage_GetSessionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSessionStorage_GetSessionByID_Call) Return(_a0 *models.Session, _a1 error) *MockSessionStorage_GetSessionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionStorage_GetSessionByID_Call) RunAndReturn(run func(context.Context, string) (*models.Session, error)) *MockSessionStorage_GetSessionByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewSession provides a mock function with given fields: ctx, session
func (_m *MockSessionStorage) NewSession(ctx context.Context, session *models.Session) error {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for NewSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Session) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionStorage_NewSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewSession'
type MockSessionStorage_NewSession_Call struct {
	*mock.Call
}

// NewSession is a helper method to define mock.On call
//   - ctx context.Context
//   - session *models.Session
func (_e *MockSessionStorage_Expecter) NewSession(ctx interface{}, session interface{}) *MockSessionStorage_NewSession_Call {
	return &MockSessionStorage_NewSession_Call{Call: _e.mock.On("NewSession", ctx, session)}
}

func (_c *MockSessionStorage_NewSession_Call) Run(run func(ctx context.Context, session *models.Session)) *MockSessionStorage_NewSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Session))
	})
	return _c
}

func (_c *MockSessionStorage_NewSession_Call) Return(_a0 error) *MockSessionStorage_NewSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionStorage_NewSession_Call) RunAndReturn(run func(context.Context, *models.Session) error) *MockSessionStorage_NewSession_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeSession provides a mock function with given fields: ctx, sessionID
func (_m *MockSessionStorage) RevokeSession(ctx context.Context, sessionID string) error {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for RevokeSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionStorage_RevokeSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeSession'
type MockSessionStorage_RevokeSession_Call struct {
	*mock.Call
}

// RevokeSession is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID string
func (_e *MockSessionStorage_Expecter) RevokeSession(ctx interface{}, sessionID interface{}) *MockSessionStorage_RevokeSession_Call {
	return &MockSessionStorage_RevokeSession_Call{Call: _e.mock.On("RevokeSession", ctx, sessionID)}
}

func (_c *MockSessionStorage_RevokeSession_Call) Run(run func(ctx context.Context, sessionID string)) *MockSessionStorage_RevokeSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSessionStorage_RevokeSession_Call) Return(_a0 error) *MockSessionStorage_RevokeSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionStorage_RevokeSession_Call) RunAndReturn(run func(context.Context, string) error) *MockSessionStorage_RevokeSession_Call {
	_c.Call.Return(run)
	return _c
}

// RotateSession provides a mock function with given fields: ctx, oldSessionID, newSession
func (_m *MockSessionStorage) RotateSession(ctx context.Context, oldSessionID string, newSession *models.Session) error {
	ret := _m.Called(ctx, oldSessionID, newSession)

	if len(ret) == 0 {
		panic("no return value specified for RotateSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.Session) error); ok {
		r0 = rf(ctx, oldSessionID, newSession)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionStorage_RotateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RotateSession'
type MockSessionStorage_RotateSession_Call struct {
	*mock.Call
}

// RotateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - oldSessionID string
//   - newSession *models.Session
func (_e *MockSessionStorage_Expecter) RotateSession(ctx interface{}, oldSessionID interface{}, newSession interface{}) *MockSessionStorage_RotateSession_Call {
	return &MockSessionStorage_RotateSession_Call{Call: _e.mock.On("RotateSession", ctx, oldSessionID, newSession)}
}

func (_c *MockSessionStorage_RotateSession_Call) Run(run func(ctx context.Context, oldSessionID string, newSession *models.Session)) *MockSessionStorage_RotateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*models.Session))
	})
	return _c
}

func (_c *MockSessionStorage_RotateSession_Call) Return(_a0 error) *MockSessionStorage_RotateSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionStorage_RotateSession_Call) RunAndReturn(run func(context.Context, string, *models.Session) error) *MockSessionStorage_RotateSession_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSessionStorage creates a new instance of MockSessionStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionStorage {
	mock := &MockSessionStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
