// Code generated by mockery v2.53.3. DO NOT EDIT.

package http

import (
	models "github.com/DaniilZ77/auth-service/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockTokenHandler is an autogenerated mock type for the TokenHandler type
type MockTokenHandler struct {
	mock.Mock
}

type MockTokenHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenHandler) EXPECT() *MockTokenHandler_Expecter {
	return &MockTokenHandler_Expecter{mock: &_m.Mock}
}

// ParseToken provides a mock function with given fields: token
func (_m *MockTokenHandler) ParseToken(token string) (*models.TokenClaims, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ParseToken")
	}

	var r0 *models.TokenClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.TokenClaims, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *models.TokenClaims); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TokenClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenHandler_ParseToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseToken'
type MockTokenHandler_ParseToken_Call struct {
	*mock.Call
}

// ParseToken is a helper method to define mock.On call
//   - token string
func (_e *MockTokenHandler_Expecter) ParseToken(token interface{}) *MockTokenHandler_ParseToken_Call {
	return &MockTokenHandler_ParseToken_Call{Call: _e.mock.On("ParseToken", token)}
}

func (_c *MockTokenHandler_ParseToken_Call) Run(run func(token string)) *MockTokenHandler_ParseToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTokenHandler_ParseToken_Call) Return(_a0 *models.TokenClaims, _a1 error) *MockTokenHandler_ParseToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenHandler_ParseToken_Call) RunAndReturn(run func(string) (*models.TokenClaims, error)) *MockTokenHandler_ParseToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokenHandler creates a new instance of MockTokenHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenHandler {
	mock := &MockTokenHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
