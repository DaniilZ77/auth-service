// Code generated by mockery v2.53.3. DO NOT EDIT.

package http

import (
	context "context"

	models "github.com/DaniilZ77/auth-service/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// MockAuthService is an autogenerated mock type for the AuthService type
type MockAuthService struct {
	mock.Mock
}

type MockAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthService) EXPECT() *MockAuthService_Expecter {
	return &MockAuthService_Expecter{mock: &_m.Mock}
}

// CheckSession provides a mock function with given fields: ctx, sessionID
func (_m *MockAuthService) CheckSession(ctx context.Context, sessionID string) error {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for CheckSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthService_CheckSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckSession'
type MockAuthService_CheckSession_Call struct {
	*mock.Call
}

// CheckSession is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID string
func (_e *MockAuthService_Expecter) CheckSession(ctx interface{}, sessionID interface{}) *MockAuthService_CheckSession_Call {
	return &MockAuthService_CheckSession_Call{Call: _e.mock.On("CheckSession", ctx, sessionID)}
}

func (_c *MockAuthService_CheckSession_Call) Run(run func(ctx context.Context, sessionID string)) *MockAuthService_CheckSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthService_CheckSession_Call) Return(_a0 error) *MockAuthService_CheckSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthService_CheckSession_Call) RunAndReturn(run func(context.Context, string) error) *MockAuthService_CheckSession_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, userID, userAgent
func (_m *MockAuthService) Login(ctx context.Context, userID string, userAgent string) (*models.TokensInfo, error) {
	ret := _m.Called(ctx, userID, userAgent)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *models.TokensInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.TokensInfo, error)); ok {
		return rf(ctx, userID, userAgent)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.TokensInfo); ok {
		r0 = rf(ctx, userID, userAgent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TokensInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, userAgent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockAuthService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - userAgent string
func (_e *MockAuthService_Expecter) Login(ctx interface{}, userID interface{}, userAgent interface{}) *MockAuthService_Login_Call {
	return &MockAuthService_Login_Call{Call: _e.mock.On("Login", ctx, userID, userAgent)}
}

func (_c *MockAuthService_Login_Call) Run(run func(ctx context.Context, userID string, userAgent string)) *MockAuthService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAuthService_Login_Call) Return(tokens *models.TokensInfo, err error) *MockAuthService_Login_Call {
	_c.Call.Return(tokens, err)
	return _c
}

func (_c *MockAuthService_Login_Call) RunAndReturn(run func(context.Context, string, string) (*models.TokensInfo, error)) *MockAuthService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: ctx, sessionID
func (_m *MockAuthService) Logout(ctx context.Context, sessionID string) error {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthService_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockAuthService_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID string
func (_e *MockAuthService_Expecter) Logout(ctx interface{}, sessionID interface{}) *MockAuthService_Logout_Call {
	return &MockAuthService_Logout_Call{Call: _e.mock.On("Logout", ctx, sessionID)}
}

func (_c *MockAuthService_Logout_Call) Run(run func(ctx context.Context, sessionID string)) *MockAuthService_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthService_Logout_Call) Return(_a0 error) *MockAuthService_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthService_Logout_Call) RunAndReturn(run func(context.Context, string) error) *MockAuthService_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: ctx, oldTokens, requestMeta
func (_m *MockAuthService) RefreshToken(ctx context.Context, oldTokens *models.TokensInfo, requestMeta *models.RequestMeta) (*models.TokensInfo, error) {
	ret := _m.Called(ctx, oldTokens, requestMeta)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 *models.TokensInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TokensInfo, *models.RequestMeta) (*models.TokensInfo, error)); ok {
		return rf(ctx, oldTokens, requestMeta)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TokensInfo, *models.RequestMeta) *models.TokensInfo); ok {
		r0 = rf(ctx, oldTokens, requestMeta)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TokensInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TokensInfo, *models.RequestMeta) error); ok {
		r1 = rf(ctx, oldTokens, requestMeta)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type MockAuthService_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - oldTokens *models.TokensInfo
//   - requestMeta *models.RequestMeta
func (_e *MockAuthService_Expecter) RefreshToken(ctx interface{}, oldTokens interface{}, requestMeta interface{}) *MockAuthService_RefreshToken_Call {
	return &MockAuthService_RefreshToken_Call{Call: _e.mock.On("RefreshToken", ctx, oldTokens, requestMeta)}
}

func (_c *MockAuthService_RefreshToken_Call) Run(run func(ctx context.Context, oldTokens *models.TokensInfo, requestMeta *models.RequestMeta)) *MockAuthService_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.TokensInfo), args[2].(*models.RequestMeta))
	})
	return _c
}

func (_c *MockAuthService_RefreshToken_Call) Return(newTokens *models.TokensInfo, err error) *MockAuthService_RefreshToken_Call {
	_c.Call.Return(newTokens, err)
	return _c
}

func (_c *MockAuthService_RefreshToken_Call) RunAndReturn(run func(context.Context, *models.TokensInfo, *models.RequestMeta) (*models.TokensInfo, error)) *MockAuthService_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthService creates a new instance of MockAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthService {
	mock := &MockAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
